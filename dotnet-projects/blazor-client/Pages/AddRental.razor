@page "/add-rental"
@using blazor_client.Contacts
@using shared.Enums
@using shared.Models
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IApiService apiService;

<PageTitle>Add Car</PageTitle>

<form @onsubmit="Submit" class="row">
    <div class="form-group col-xs-12 col-md-6">
        <label for="startDateInput">Start date</label>
        <input type="datetime-local"
               @bind="startDateInput"
               class="@(!string.IsNullOrEmpty(startDateInputErrorMessage) ? "is-invalid form-control" : "form-control")"
               id="startDateInput">
        <div class="@(!string.IsNullOrEmpty(startDateInputErrorMessage) ? "invalid-feedback" : "feedback")">
            @(startDateInputErrorMessage ?? "")
        </div>
    </div>
    
    <div class="form-group col-xs-12 col-md-6">
        <label for="endDateInput">End date</label>
        <input type="datetime-local"
               @bind="endDateInput"
               class="@(!string.IsNullOrEmpty(endDateInputErrorMessage) ? "is-invalid form-control" : "form-control")"
               id="endDateInput">
        <div class="@(!string.IsNullOrEmpty(endDateInputErrorMessage) ? "invalid-feedback" : "feedback")">
            @(endDateInputErrorMessage ?? "")
        </div>
    </div>
    
    <div class="form-group col-xs-12 col-md-6 mb-4">
        <label for="carInput">Car</label> 
        <select @bind="carInput" class="@(!string.IsNullOrEmpty(carInputErrorMessage)? "is-invalid form-control" : "form-control")" id="makeInput">
            @foreach (var car in cars)
            {
                <option value="@car.RegistrationNumber">@car.Type, @car.Make</option> // TODO: Disable unavailable cars
            }
        </select>
        <div class="@(!string.IsNullOrEmpty(carInputErrorMessage)? "invalid-feedback" : "feedback")">
            @(carInputErrorMessage ?? "")
        </div>
    </div>

    <div class="form-group col-xs-12 col-md-6">
        <label for="userIdInput">User</label>
        <InputNumber @bind-Value="userIdInput"
                     class="@(!string.IsNullOrEmpty(userIdInputErrorMessage) ? "is-invalid form-control" : "form-control")"
                     placeholder="Enter user id"
                     id="userIdInput" />
        <div class="@(!string.IsNullOrEmpty(userIdInputErrorMessage) ? "invalid-feedback" : "feedback")">
            @(userIdInputErrorMessage ?? "")
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="text-end">
                <button disabled="@isSubmitting"  type="submit" class="btn btn-primary mt-2 pull-right" style="width: 100px">
                    @if (isSubmitting)
                    {
                        <div class="spinner-border text-white" role="status" />
                    }
                    else {
                        <span>Submit</span>
                    }
                </button>
            </div>
        </div>
    </div>
</form>


@code {
    private DateTime? startDateInput;
    private string? startDateInputErrorMessage;
    
    private DateTime? endDateInput;
    private string? endDateInputErrorMessage;
    
    private List<CarDto> cars = new List<CarDto>();
    private string carInput = string.Empty;
    private string? carInputErrorMessage;
    
    private int? userIdInput;
    private string? userIdInputErrorMessage;
    
    private bool isSubmitting;
    
    protected override async Task OnInitializedAsync()
    {
        var serverUrl = "http://localhost:5098";
        var parsedCars = await Http.GetFromJsonAsync<List<CarDto>>($"{serverUrl}/cars/all");

        if (parsedCars != null)
        {
            cars = parsedCars;
            carInput = cars.First().RegistrationNumber;
        }
        else // If there are no cars go to the add car page
        {
            NavManager.NavigateTo("/add-car");
        }
        
        // Get users
    }
    
    private async Task Submit()
    {   
        if (isSubmitting) return;

        isSubmitting = true;
        var isFormValid = ValidateInputs();
        if (!isFormValid)
        {
            isSubmitting = false;
            return;
        }


        var rental = new RentalDto
        {
            CarRegNumber = carInput,
            StartDate = new DateTimeOffset(startDateInput!.Value),
            EndDate = new DateTimeOffset(endDateInput!.Value),
            UserId = (int)userIdInput!,
        };
        
        var serverErrorMessage = await apiService.AddRentalAsync(rental);

        // TODO: Do server error message handling
        if (!string.IsNullOrEmpty(serverErrorMessage))
        {
            isSubmitting = false;
            return;
        }

        isSubmitting = false;
        NavManager.NavigateTo("/rental-list?rental-added=true");
    }

    private bool ValidateInputs()
    {
        bool validated = true;
        
        // CAR VALIDATION

        if (string.IsNullOrEmpty(carInput))
        {
            carInputErrorMessage = "Please select a car";
            validated = false;
        }
        else
        {
            carInputErrorMessage = string.Empty;
        }
        
        // DATE VALIDATION
        
        if (string.IsNullOrEmpty(startDateInput.ToString())) {
            startDateInputErrorMessage = "Please select a valid date and time.";
            validated = false;
        }
        else
        {
            startDateInputErrorMessage = string.Empty;
        }
        
        if (string.IsNullOrEmpty(endDateInput.ToString())) {
            endDateInputErrorMessage = "Please select a valid date and time.";
            validated = false;
        }
        else
        {
            endDateInputErrorMessage = string.Empty;
        }

        if (startDateInput > endDateInput)
        {
            startDateInputErrorMessage = "Start date must be earlier than end date";
            endDateInputErrorMessage = "Start date must be earlier than end date";
            validated = false;
        }
        
        var tooEarlyTime = DateTime.Now.AddMinutes(15); // This is current time + 15 minutes

        if (startDateInput < tooEarlyTime)
        {
            startDateInputErrorMessage = "Start date is too early";
            validated = false;
        }
        
        // USER VALIDATION
        
        if (userIdInput < 0 || userIdInput == null) {
            userIdInputErrorMessage = "Please select a valid user ID.";
            validated = false;
        }
        else if (false) // TODO: Make sure user exists
        {
            userIdInputErrorMessage = "This user does not exist";
            validated = false;
        }
        else
        {
            userIdInputErrorMessage = string.Empty;
        }
        
        // RETURN
        
        return validated;
    }
}
@page "/add-rental"
@using Microsoft.AspNetCore.Components.Authorization
@using blazor_client.Contacts
@using shared.Enums
@using shared.Models
@using System;
@using System.Collections.Generic;
@using System.Linq;
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IApiService apiService;
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Add Car</PageTitle> 

<form @onsubmit="Submit" class="row needs-validation" novalidate>
    <div class="form-group col-xs-12 col-md-6">
        <label for="startDateInput">Start date</label>
        <input type="datetime-local"
               @bind="startDateInput"
               class="@StartDateInputClass"
               id="startDateInput"
               required>
        <div class="invalid-feedback">
            @(startDateInputErrorMessage ?? @startDateInputErrorMessage)
        </div>
    </div>
    
    <div class="form-group col-xs-12 col-md-6">
        <label for="endDateInput">End date</label>
        <input type="datetime-local"
               @bind="endDateInput"
               class="@EndDateInputClass"
               id="endDateInput"
               required>
        <div class="invalid-feedback">
            @(endDateInputErrorMessage ?? @endDateInputErrorMessage)
        </div>
    </div>
    
    <div class="form-group col-xs-12 col-md-6 mb-4">
        <label for="carInput">Car</label> 
        <select @bind="carInput" class="@CarInputClass" id="carInput" required>
            @foreach (var car in cars)
            {
                <option value="@car.RegistrationNumber">@car.Type, @car.Make</option> // TODO: Disable unavailable cars
            }
        </select>
        <div class="invalid-feedback">
            @(carInputErrorMessage ?? @carInputErrorMessage)
        </div>
    </div>

    <div class="form-group col-xs-12 col-md-6">
        <label for="userIdInput">User</label>
      
      <select @bind="userIdInput" class="@CarInputClass" id="carInput" required>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.LegalName</option>
            }
        </select>
        
        <div class="invalid-feedback">
            @(userIdInputErrorMessage ?? @userIdInputErrorMessage)
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="text-end">
                <button disabled="@isSubmitting" type="submit" class="btn btn-primary mt-2 pull-right" style="width: 100px">
                    @if (isSubmitting)
                    {
                        <div class="spinner-border text-white" role="status" />
                    }
                    else
                    {
                        <span>Submit</span>
                    }
                </button>
            </div>
        </div>
    </div>
</form>


@code { 
    private DateTime? startDateInput;
    private string? startDateInputErrorMessage;
    
    private DateTime? endDateInput;
    private string? endDateInputErrorMessage;
    
    private List<CarDto> cars = new List<CarDto>();
    private string carInput = string.Empty;
    private string? carInputErrorMessage;
    
    private IEnumerable<UserDto> users = new List<UserDto>();
    private int? userIdInput;
    private string? userIdInputErrorMessage;
    
    private bool isSubmitting;

    private string StartDateInputClass => string.IsNullOrEmpty(startDateInputErrorMessage) ? "form-control" : "form-control is-invalid";
    private string EndDateInputClass => string.IsNullOrEmpty(endDateInputErrorMessage) ? "form-control" : "form-control is-invalid";
    private string CarInputClass => string.IsNullOrEmpty(carInputErrorMessage) ? "form-control" : "form-control is-invalid";
    private string UserIdInputClass => string.IsNullOrEmpty(userIdInputErrorMessage) ? "form-control" : "form-control is-invalid";
    
    // User props
    private bool isAdmin = false;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavManager.NavigateTo("/login");
        }

        isAdmin = authState.User.Claims.Any(c => c.Type == "IsAdmin" && c.Value == "True");
        userName = authState.User.Identity?.Name ?? string.Empty;

        var carArray = await apiService.GetAllCarsAsync();
        var usersArray = await apiService.GetUsersAsync();
        var parsedCars = carArray?.ToList() ?? new List<CarDto>();
        var parsedUsers = usersArray?.ToList() ?? new List<UserDto>();

        if (parsedCars.Any() && parsedUsers.Any())
        {
            if (!isAdmin)
            {
                parsedUsers = parsedUsers.Where(c => c.LegalName == userName).ToList();
            }

            cars = parsedCars;
            carInput = cars.First().RegistrationNumber;
            users = parsedUsers;
            userIdInput = users.First().Id;
        }
        else // If there are no cars go to the add car page
        {
            if (isAdmin)
            {
                NavManager.NavigateTo("/add-car");
            }
            else {
                NavManager.NavigateTo("/");
            }
        }
    }
    
    private async Task Submit()
    {   
        if (isSubmitting) return;

        isSubmitting = true;
        var isFormValid = ValidateInputs();
        if (!isFormValid)
        {
            isSubmitting = false;
            return;
        }

        var rental = new RentalDto
        {
            CarRegNumber = carInput,
            StartDate = new DateTimeOffset(startDateInput!.Value),
            EndDate = new DateTimeOffset(endDateInput!.Value),
            UserId = (int)userIdInput!,
        };
        
        var serverErrorMessage = await apiService.AddRentalAsync(rental);
        
        // TODO: Do server error message handling
        if (!string.IsNullOrEmpty(serverErrorMessage))
        {
            isSubmitting = false;
            return;
        }

        isSubmitting = false;
        if (isAdmin)
        {
            NavManager.NavigateTo("/rental-list?rental-added=true");
        }
        else
        {
            NavManager.NavigateTo("/");
        }
    }


    private bool ValidateInputs()
    {
        bool validated = true;
        
        // CAR VALIDATION
        
        if (string.IsNullOrEmpty(carInput))
        {
            carInputErrorMessage = "Please select a car.";
            validated = false;
        }
        else
        {
            carInputErrorMessage = string.Empty;
        }
        
        // DATE VALIDATION
        
        if (string.IsNullOrEmpty(startDateInput.ToString())) {
            startDateInputErrorMessage = "Please select a valid start date and time.";
            validated = false;
        }
        else
        {
            startDateInputErrorMessage = string.Empty;
        }
        
        if (string.IsNullOrEmpty(endDateInput.ToString())) {
            endDateInputErrorMessage = "Please select a valid end date and time.";
            validated = false;
        }
        else
        {
            endDateInputErrorMessage = string.Empty;
        }

        if (startDateInput > endDateInput)
        {
            startDateInputErrorMessage = "Start date must be earlier than end date.";
            endDateInputErrorMessage = "Start date must be earlier than end date.";
            validated = false;
        }

        if (startDateInput < DateTime.Now.AddMinutes(15)) // This is current time + 15 minutes
        {
            startDateInputErrorMessage = "Start date is too early.";
            validated = false;
        }
        
        // USER VALIDATION
        if (userIdInput < 0 || userIdInput == null) {
            userIdInputErrorMessage = "Please provide a valid user ID.";
            validated = false;
        }
        else
        {
            userIdInputErrorMessage = string.Empty;
        }
        
        // RETURN
        
        return validated;
    }
}

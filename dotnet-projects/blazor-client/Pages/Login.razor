@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using blazor_client.Auth
@using blazor_client.Contacts
@using shared.Models
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IApiService apiService
@inject AuthenticationStateProvider AuthStateProvider

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header text-center">
                    <h4>Login</h4>
                </div>
                <div class="card-body">
                    <form @onsubmit="HandleLogin">
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" id="username" class="form-control" @bind="loginRequest.Email" placeholder="Enter email" required />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" id="password" class="form-control" @bind="loginRequest.Password" placeholder="Enter password" required />
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </form>
                </div>
                @if (errorMessage != null)
                {
                    <div class="card-footer text-danger text-center">
                        @errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginRequest = new LoginModel();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response =  await apiService.LoginAsync(loginRequest);
            await LocalStorage.SetItemAsync("token", response);

            // Notify the authentication state provider
            var authProvider = (CustomAuthStateProvider)AuthStateProvider;
            authProvider.NotifyAuthenticationStateChanged();


            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
    }

    private class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}

@page "/rental-list"
@using Microsoft.AspNetCore.Components.Authorization
@using blazor_client.Contacts
@using shared
@using shared.Enums
@using shared.Models
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IApiService apiService;
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Rentals</PageTitle>

<h1>Rentals</h1>

<p>Those are the rentals in the system</p>

@if (rental == null)
{
    <p><em>Loading...</em></p>
}
else if (rental.Length == 0)
{
    <p><em>No rental found</em></p>
}
else
{
    @if(isRentalAdded)
    {
        <div class="alert alert-success" role="alert">
            A new rental has been added successfully!
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Car reg number</th>
                <th>User</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Dropoff Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rental in rental)
            {
                <tr>
                    <td style="cursor: pointer;" @onclick="() => NavigateToEditRental(rental.Id.ToString())">@rental.CarRegNumber</td>
                    <td>@rental.User?.LegalName</td>
                    <td>@rental.StartDate.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@rental.EndDate.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@rental.Status</td>
                    <td>@(rental.DropDate.ToUnixTimeMilliseconds() == 0 ? "None" : rental.DropDate.ToString("dd-MM-yyyy HH:mm"))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private RentalDto[]? rental;
    private bool isRentalAdded;

    void NavigateToEditRental(string rentalId)
    {
        NavManager.NavigateTo($"/edit-rental/{rentalId}");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavManager.NavigateTo("/login");
        }
        
        var query = new Uri(NavManager.Uri).Query;
        if (query.Contains("rental-added")) {
            // Show snackbar
            isRentalAdded = true;

            // Remove the query parameter
            NavManager.NavigateTo("/rental-list");
        }

        rental = await apiService.GetAllRentalsAsync();
    }

}

@page "/"
@using Microsoft.AspNetCore.Components.Authorization;
@using blazor_client.Contacts
@using shared.Models
@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthStateProvider
@inject IApiService ApiService

<PageTitle>Home</PageTitle>

<h1>Hello, @userName</h1>

Welcome to electrikar!

@if (isAdmin)
{
    <p>You are an admin. You can add and edit cars and rentals!</p>
}

@if (!isAdmin)
{
      <table class="table">
        <thead>
            <tr>
                <th>Car reg number</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Dropoff Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rental in rentals)
            {
                <tr>
                    <td style="cursor: pointer;" @onclick="() => NavigateToEditRental(rental.Id.ToString())">@rental.CarRegNumber</td>
                    <td>@rental.StartDate.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@rental.EndDate.ToString("dd-MM-yyyy HH:mm")</td>
                    <td>@rental.Status</td>
                    <td>@(rental.DropDate.ToUnixTimeMilliseconds() == 0 ? "None" : rental.DropDate.ToString("dd-MM-yyyy HH:mm"))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isAdmin = false;
    private string userName = string.Empty;
    private List<RentalDto> rentals = new List<RentalDto>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        
        if (!authState.User.Identity?.IsAuthenticated ?? false)
        {
            Navigation.NavigateTo("/login");
        }

        isAdmin = authState.User.Claims.Any(c => c.Type == "IsAdmin" && c.Value == "True");
        userName = authState.User.Identity?.Name ?? string.Empty;

        if (!isAdmin)
        {
            var rentalsResponse = await ApiService.GetAllRentalsAsync();
            if (rentalsResponse != null)
            {
                rentals = rentalsResponse.Where(r => r.User?.LegalName == userName).ToList();
            }
        }

        // Subscribe to authentication state changes
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }
    
    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        isAdmin = authState.User.Claims.Any(c => c.Type == "IsAdmin" && c.Value == "True");
        userName = authState.User.Identity?.Name ?? string.Empty;

         if (!isAdmin)
        {
            var rentalsResponse = await ApiService.GetAllRentalsAsync();
            if (rentalsResponse != null)
            {
                rentals = rentalsResponse.Where(r => r.User?.LegalName == userName).ToList();
            }
        }

        // Notify the UI of the state change
        StateHasChanged();
    }

    void NavigateToEditRental(string rentalId)
    {
        Navigation.NavigateTo($"/edit-rental/{rentalId}");
    }

}